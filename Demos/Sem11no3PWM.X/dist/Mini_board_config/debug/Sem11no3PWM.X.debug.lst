

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Apr 15 10:28:32 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec,minocg
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1,minocg
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1,minocg
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    13  0000                     
    14                           ; Version 2.10
    15                           ; Generated 31/07/2019 GMT
    16                           ; 
    17                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC18F45K20 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     _TRISCbits	set	3988
    49  0000                     _ANSELH	set	3967
    50  0000                     _TRISBbits	set	3987
    51  0000                     _PORTBbits	set	3969
    52  0000                     _T2CONbits	set	4042
    53  0000                     _PIR1bits	set	3998
    54  0000                     _CCP2CONbits	set	4026
    55  0000                     _PR2	set	4043
    56  0000                     _CCPR2L	set	4027
    57                           
    58                           ; #config settings
    59  0000                     
    60                           	psect	cinit
    61  007C0E                     __pcinit:
    62                           	opt callstack 0
    63  007C0E                     start_initialization:
    64                           	opt callstack 0
    65  007C0E                     __initialization:
    66                           	opt callstack 0
    67  007C0E                     end_of_initialization:
    68                           	opt callstack 0
    69  007C0E                     __end_of__initialization:
    70                           	opt callstack 0
    71  007C0E  0100               	movlb	0
    72  007C10  EF37  F03E         	goto	_main	;jump to C main() function
    73                           
    74                           	psect	cstackBANK0
    75  000060                     __pcstackBANK0:
    76                           	opt callstack 0
    77  000060                     ?___wmul:
    78                           	opt callstack 0
    79  000060                     ___wmul@multiplier:
    80                           	opt callstack 0
    81                           
    82                           ; 2 bytes @ 0x0
    83  000060                     	ds	2
    84  000062                     ___wmul@multiplicand:
    85                           	opt callstack 0
    86                           
    87                           ; 2 bytes @ 0x2
    88  000062                     	ds	2
    89  000064                     ___wmul@product:
    90                           	opt callstack 0
    91                           
    92                           ; 2 bytes @ 0x4
    93  000064                     	ds	2
    94  000066                     ?___awdiv:
    95                           	opt callstack 0
    96  000066                     ___awdiv@dividend:
    97                           	opt callstack 0
    98                           
    99                           ; 2 bytes @ 0x6
   100  000066                     	ds	2
   101  000068                     ___awdiv@divisor:
   102                           	opt callstack 0
   103                           
   104                           ; 2 bytes @ 0x8
   105  000068                     	ds	2
   106  00006A                     ___awdiv@counter:
   107                           	opt callstack 0
   108                           
   109                           ; 1 bytes @ 0xA
   110  00006A                     	ds	1
   111  00006B                     ___awdiv@sign:
   112                           	opt callstack 0
   113                           
   114                           ; 1 bytes @ 0xB
   115  00006B                     	ds	1
   116  00006C                     ___awdiv@quotient:
   117                           	opt callstack 0
   118                           
   119                           ; 2 bytes @ 0xC
   120  00006C                     	ds	2
   121  00006E                     main@MLIpourCent:
   122                           	opt callstack 0
   123                           
   124                           ; 2 bytes @ 0xE
   125  00006E                     	ds	2
   126                           
   127 ;;
   128 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   129 ;;
   130 ;; *************** function _main *****************
   131 ;; Defined at:
   132 ;;		line 22 in file "main.c"
   133 ;; Parameters:    Size  Location     Type
   134 ;;		None
   135 ;; Auto vars:     Size  Location     Type
   136 ;;  MLIpourCent     2   14[BANK0 ] int 
   137 ;; Return value:  Size  Location     Type
   138 ;;                  1    wreg      void 
   139 ;; Registers used:
   140 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   141 ;; Tracked objects:
   142 ;;		On entry : 0/0
   143 ;;		On exit  : 0/0
   144 ;;		Unchanged: 0/0
   145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   146 ;;      Params:         0       0       0       0       0       0       0
   147 ;;      Locals:         0       2       0       0       0       0       0
   148 ;;      Temps:          0       0       0       0       0       0       0
   149 ;;      Totals:         0       2       0       0       0       0       0
   150 ;;Total ram usage:        2 bytes
   151 ;; Hardware stack levels required when called:    1
   152 ;; This function calls:
   153 ;;		___awdiv
   154 ;;		___wmul
   155 ;;		_initialisation
   156 ;; This function is called by:
   157 ;;		Startup code after reset
   158 ;; This function uses a non-reentrant model
   159 ;;
   160                           
   161                           	psect	text0
   162  007C6E                     __ptext0:
   163                           	opt callstack 0
   164  007C6E                     _main:
   165                           	opt callstack 30
   166  007C6E                     
   167                           ;main.c: 24:     int MLIpourCent = 10;
   168  007C6E  0E00               	movlw	0
   169  007C70  0100               	movlb	0	; force () banked
   170  007C72  6F6F               	movwf	(main@MLIpourCent+1)& (0+255),b
   171  007C74  0E0A               	movlw	10
   172  007C76  6F6E               	movwf	main@MLIpourCent& (0+255),b
   173  007C78                     
   174                           ; BSR set to: 0
   175                           ;main.c: 25:     initialisation();
   176  007C78  EC1E  F03E         	call	_initialisation	;wreg free
   177  007C7C                     l843:
   178                           
   179                           ;main.c: 31:     {;main.c: 32:         if (PORTBbits.RB0 == 0)
   180  007C7C  B081               	btfsc	129,0,c	;volatile
   181  007C7E  EF43  F03E         	goto	u171
   182  007C82  EF45  F03E         	goto	u170
   183  007C86                     u171:
   184  007C86  EF60  F03E         	goto	l851
   185  007C8A                     u170:
   186  007C8A                     l27:
   187  007C8A  A081               	btfss	129,0,c	;volatile
   188  007C8C  EF4A  F03E         	goto	u181
   189  007C90  EF4C  F03E         	goto	u180
   190  007C94                     u181:
   191  007C94  EF45  F03E         	goto	l27
   192  007C98                     u180:
   193  007C98                     
   194                           ;main.c: 35:             MLIpourCent += 10;
   195  007C98  0E0A               	movlw	10
   196  007C9A  0100               	movlb	0	; force () banked
   197  007C9C  276E               	addwf	main@MLIpourCent& (0+255),f,b
   198  007C9E  0E00               	movlw	0
   199  007CA0  236F               	addwfc	(main@MLIpourCent+1)& (0+255),f,b
   200                           
   201                           ;main.c: 36:             if (MLIpourCent == 100)
   202  007CA2  0E64               	movlw	100
   203  007CA4  196E               	xorwf	main@MLIpourCent& (0+255),w,b
   204  007CA6  116F               	iorwf	(main@MLIpourCent+1)& (0+255),w,b
   205  007CA8  A4D8               	btfss	status,2,c
   206  007CAA  EF59  F03E         	goto	u191
   207  007CAE  EF5B  F03E         	goto	u190
   208  007CB2                     u191:
   209  007CB2  EF60  F03E         	goto	l851
   210  007CB6                     u190:
   211  007CB6                     
   212                           ; BSR set to: 0
   213                           ;main.c: 37:                 MLIpourCent = 10;
   214  007CB6  0E00               	movlw	0
   215  007CB8  0100               	movlb	0	; force () banked
   216  007CBA  6F6F               	movwf	(main@MLIpourCent+1)& (0+255),b
   217  007CBC  0E0A               	movlw	10
   218  007CBE  6F6E               	movwf	main@MLIpourCent& (0+255),b
   219  007CC0                     l851:
   220                           
   221                           ;main.c: 40:         CCPR2L = (MLIpourCent * 124 / 100);
   222  007CC0  C06E  F060         	movff	main@MLIpourCent,___wmul@multiplier
   223  007CC4  C06F  F061         	movff	main@MLIpourCent+1,___wmul@multiplier+1
   224  007CC8  0E00               	movlw	0
   225  007CCA  0100               	movlb	0	; force () banked
   226  007CCC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   227  007CCE  0E7C               	movlw	124
   228  007CD0  6F62               	movwf	___wmul@multiplicand& (0+255),b
   229  007CD2  EC0A  F03E         	call	___wmul	;wreg free
   230  007CD6  C060  F066         	movff	?___wmul,___awdiv@dividend
   231  007CDA  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
   232  007CDE  0E00               	movlw	0
   233  007CE0  0100               	movlb	0	; force () banked
   234  007CE2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
   235  007CE4  0E64               	movlw	100
   236  007CE6  6F68               	movwf	___awdiv@divisor& (0+255),b
   237  007CE8  EC7D  F03E         	call	___awdiv	;wreg free
   238  007CEC  0100               	movlb	0	; force () banked
   239  007CEE  5166               	movf	?___awdiv& (0+255),w,b
   240  007CF0  6EBB               	movwf	187,c	;volatile
   241  007CF2  EF3E  F03E         	goto	l843
   242  007CF6  EF00  F000         	goto	start
   243  007CFA                     __end_of_main:
   244                           	opt callstack 0
   245                           
   246 ;; *************** function _initialisation *****************
   247 ;; Defined at:
   248 ;;		line 47 in file "main.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;		None
   253 ;; Return value:  Size  Location     Type
   254 ;;                  1    wreg      void 
   255 ;; Registers used:
   256 ;;		wreg, status,2
   257 ;; Tracked objects:
   258 ;;		On entry : 0/0
   259 ;;		On exit  : 0/0
   260 ;;		Unchanged: 0/0
   261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   262 ;;      Params:         0       0       0       0       0       0       0
   263 ;;      Locals:         0       0       0       0       0       0       0
   264 ;;      Temps:          0       0       0       0       0       0       0
   265 ;;      Totals:         0       0       0       0       0       0       0
   266 ;;Total ram usage:        0 bytes
   267 ;; Hardware stack levels used:    1
   268 ;; This function calls:
   269 ;;		Nothing
   270 ;; This function is called by:
   271 ;;		_main
   272 ;; This function uses a non-reentrant model
   273 ;;
   274                           
   275                           	psect	text1
   276  007C3C                     __ptext1:
   277                           	opt callstack 0
   278  007C3C                     _initialisation:
   279                           	opt callstack 30
   280  007C3C                     
   281                           ;main.c: 50:     TRISBbits.TRISB0 = 1;
   282  007C3C  8093               	bsf	147,0,c	;volatile
   283  007C3E                     
   284                           ;main.c: 51:     ANSELH = 0;
   285  007C3E  0E00               	movlw	0
   286  007C40  6E7F               	movwf	127,c	;volatile
   287  007C42                     
   288                           ;main.c: 57:     TRISCbits.RC1 = 1;
   289  007C42  8294               	bsf	148,1,c	;volatile
   290                           
   291                           ;main.c: 64:     PR2 = 124;
   292  007C44  0E7C               	movlw	124
   293  007C46  6ECB               	movwf	203,c	;volatile
   294                           
   295                           ;main.c: 68:     CCP2CONbits.CCP2M = 0b1111;
   296  007C48  0E0F               	movlw	15
   297  007C4A  12BA               	iorwf	186,f,c	;volatile
   298                           
   299                           ;main.c: 72:     CCPR2L = 12;
   300  007C4C  0E0C               	movlw	12
   301  007C4E  6EBB               	movwf	187,c	;volatile
   302                           
   303                           ;main.c: 73:     CCP2CONbits.DC2B = 0b00;
   304  007C50  0ECF               	movlw	-49
   305  007C52  16BA               	andwf	186,f,c	;volatile
   306  007C54                     
   307                           ;main.c: 76:     PIR1bits.TMR2IF = 0;
   308  007C54  929E               	bcf	158,1,c	;volatile
   309                           
   310                           ;main.c: 77:     T2CONbits.T2CKPS = 0;
   311  007C56  0EFC               	movlw	-4
   312  007C58  16CA               	andwf	202,f,c	;volatile
   313  007C5A                     
   314                           ;main.c: 78:     T2CONbits.TMR2ON = 1;
   315  007C5A  84CA               	bsf	202,2,c	;volatile
   316  007C5C                     l36:
   317  007C5C  A29E               	btfss	158,1,c	;volatile
   318  007C5E  EF33  F03E         	goto	u11
   319  007C62  EF35  F03E         	goto	u10
   320  007C66                     u11:
   321  007C66  EF2E  F03E         	goto	l36
   322  007C6A                     u10:
   323  007C6A                     
   324                           ;main.c: 82:     TRISCbits.RC1 = 0;
   325  007C6A  9294               	bcf	148,1,c	;volatile
   326  007C6C  0012               	return		;funcret
   327  007C6E                     __end_of_initialisation:
   328                           	opt callstack 0
   329                           
   330 ;; *************** function ___wmul *****************
   331 ;; Defined at:
   332 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;  multiplier      2    0[BANK0 ] unsigned int 
   335 ;;  multiplicand    2    2[BANK0 ] unsigned int 
   336 ;; Auto vars:     Size  Location     Type
   337 ;;  product         2    4[BANK0 ] unsigned int 
   338 ;; Return value:  Size  Location     Type
   339 ;;                  2    0[BANK0 ] unsigned int 
   340 ;; Registers used:
   341 ;;		wreg, status,2, status,0, prodl, prodh
   342 ;; Tracked objects:
   343 ;;		On entry : 0/0
   344 ;;		On exit  : 0/0
   345 ;;		Unchanged: 0/0
   346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   347 ;;      Params:         0       4       0       0       0       0       0
   348 ;;      Locals:         0       2       0       0       0       0       0
   349 ;;      Temps:          0       0       0       0       0       0       0
   350 ;;      Totals:         0       6       0       0       0       0       0
   351 ;;Total ram usage:        6 bytes
   352 ;; Hardware stack levels used:    1
   353 ;; This function calls:
   354 ;;		Nothing
   355 ;; This function is called by:
   356 ;;		_main
   357 ;; This function uses a non-reentrant model
   358 ;;
   359                           
   360                           	psect	text2
   361  007C14                     __ptext2:
   362                           	opt callstack 0
   363  007C14                     ___wmul:
   364                           	opt callstack 30
   365  007C14  0100               	movlb	0	; () banked
   366  007C16  5160               	movf	___wmul@multiplier& (0+255),w,b
   367  007C18  0362               	mulwf	___wmul@multiplicand& (0+255),b
   368  007C1A  CFF3 F064          	movff	prodl,___wmul@product
   369  007C1E  CFF4 F065          	movff	prodh,___wmul@product+1
   370  007C22  5160               	movf	___wmul@multiplier& (0+255),w,b
   371  007C24  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
   372  007C26  50F3               	movf	243,w,c
   373  007C28  2765               	addwf	(___wmul@product+1)& (0+255),f,b
   374  007C2A  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
   375  007C2C  0362               	mulwf	___wmul@multiplicand& (0+255),b
   376  007C2E  50F3               	movf	243,w,c
   377  007C30  2765               	addwf	(___wmul@product+1)& (0+255),f,b
   378  007C32                     
   379                           ; BSR set to: 0
   380  007C32  C064  F060         	movff	___wmul@product,?___wmul
   381  007C36  C065  F061         	movff	___wmul@product+1,?___wmul+1
   382  007C3A                     
   383                           ; BSR set to: 0
   384  007C3A  0012               	return		;funcret
   385  007C3C                     __end_of___wmul:
   386                           	opt callstack 0
   387                           
   388 ;; *************** function ___awdiv *****************
   389 ;; Defined at:
   390 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
   391 ;; Parameters:    Size  Location     Type
   392 ;;  dividend        2    6[BANK0 ] int 
   393 ;;  divisor         2    8[BANK0 ] int 
   394 ;; Auto vars:     Size  Location     Type
   395 ;;  quotient        2   12[BANK0 ] int 
   396 ;;  sign            1   11[BANK0 ] unsigned char 
   397 ;;  counter         1   10[BANK0 ] unsigned char 
   398 ;; Return value:  Size  Location     Type
   399 ;;                  2    6[BANK0 ] int 
   400 ;; Registers used:
   401 ;;		wreg, status,2, status,0
   402 ;; Tracked objects:
   403 ;;		On entry : 0/0
   404 ;;		On exit  : 0/0
   405 ;;		Unchanged: 0/0
   406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   407 ;;      Params:         0       4       0       0       0       0       0
   408 ;;      Locals:         0       4       0       0       0       0       0
   409 ;;      Temps:          0       0       0       0       0       0       0
   410 ;;      Totals:         0       8       0       0       0       0       0
   411 ;;Total ram usage:        8 bytes
   412 ;; Hardware stack levels used:    1
   413 ;; This function calls:
   414 ;;		Nothing
   415 ;; This function is called by:
   416 ;;		_main
   417 ;; This function uses a non-reentrant model
   418 ;;
   419                           
   420                           	psect	text3
   421  007CFA                     __ptext3:
   422                           	opt callstack 0
   423  007CFA                     ___awdiv:
   424                           	opt callstack 30
   425  007CFA  0E00               	movlw	0
   426  007CFC  0100               	movlb	0	; () banked
   427  007CFE  6F6B               	movwf	___awdiv@sign& (0+255),b
   428  007D00                     
   429                           ; BSR set to: 0
   430  007D00  BF69               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
   431  007D02  EF87  F03E         	goto	u110
   432  007D06  EF85  F03E         	goto	u111
   433  007D0A                     u111:
   434  007D0A  EF8D  F03E         	goto	l803
   435  007D0E                     u110:
   436  007D0E                     
   437                           ; BSR set to: 0
   438  007D0E  6D68               	negf	___awdiv@divisor& (0+255),b
   439  007D10  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
   440  007D12  B0D8               	btfsc	status,0,c
   441  007D14  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
   442  007D16                     
   443                           ; BSR set to: 0
   444  007D16  0E01               	movlw	1
   445  007D18  6F6B               	movwf	___awdiv@sign& (0+255),b
   446  007D1A                     l803:
   447                           
   448                           ; BSR set to: 0
   449  007D1A  BF67               	btfsc	(___awdiv@dividend+1)& (0+255),7,b
   450  007D1C  EF94  F03E         	goto	u120
   451  007D20  EF92  F03E         	goto	u121
   452  007D24                     u121:
   453  007D24  EF9A  F03E         	goto	l809
   454  007D28                     u120:
   455  007D28                     
   456                           ; BSR set to: 0
   457  007D28  6D66               	negf	___awdiv@dividend& (0+255),b
   458  007D2A  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
   459  007D2C  B0D8               	btfsc	status,0,c
   460  007D2E  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
   461  007D30                     
   462                           ; BSR set to: 0
   463  007D30  0E01               	movlw	1
   464  007D32  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
   465  007D34                     l809:
   466                           
   467                           ; BSR set to: 0
   468  007D34  0E00               	movlw	0
   469  007D36  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
   470  007D38  0E00               	movlw	0
   471  007D3A  6F6C               	movwf	___awdiv@quotient& (0+255),b
   472  007D3C                     
   473                           ; BSR set to: 0
   474  007D3C  5168               	movf	___awdiv@divisor& (0+255),w,b
   475  007D3E  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
   476  007D40  B4D8               	btfsc	status,2,c
   477  007D42  EFA5  F03E         	goto	u131
   478  007D46  EFA7  F03E         	goto	u130
   479  007D4A                     u131:
   480  007D4A  EFCF  F03E         	goto	l831
   481  007D4E                     u130:
   482  007D4E                     
   483                           ; BSR set to: 0
   484  007D4E  0E01               	movlw	1
   485  007D50  6F6A               	movwf	___awdiv@counter& (0+255),b
   486  007D52  EFAF  F03E         	goto	l817
   487  007D56                     l815:
   488                           
   489                           ; BSR set to: 0
   490  007D56  90D8               	bcf	status,0,c
   491  007D58  3768               	rlcf	___awdiv@divisor& (0+255),f,b
   492  007D5A  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
   493  007D5C  2B6A               	incf	___awdiv@counter& (0+255),f,b
   494  007D5E                     l817:
   495                           
   496                           ; BSR set to: 0
   497  007D5E  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
   498  007D60  EFB4  F03E         	goto	u141
   499  007D64  EFB6  F03E         	goto	u140
   500  007D68                     u141:
   501  007D68  EFAB  F03E         	goto	l815
   502  007D6C                     u140:
   503  007D6C                     l819:
   504                           
   505                           ; BSR set to: 0
   506  007D6C  90D8               	bcf	status,0,c
   507  007D6E  376C               	rlcf	___awdiv@quotient& (0+255),f,b
   508  007D70  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
   509  007D72                     
   510                           ; BSR set to: 0
   511  007D72  5168               	movf	___awdiv@divisor& (0+255),w,b
   512  007D74  5D66               	subwf	___awdiv@dividend& (0+255),w,b
   513  007D76  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
   514  007D78  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
   515  007D7A  A0D8               	btfss	status,0,c
   516  007D7C  EFC2  F03E         	goto	u151
   517  007D80  EFC4  F03E         	goto	u150
   518  007D84                     u151:
   519  007D84  EFC9  F03E         	goto	l827
   520  007D88                     u150:
   521  007D88                     
   522                           ; BSR set to: 0
   523  007D88  5168               	movf	___awdiv@divisor& (0+255),w,b
   524  007D8A  5F66               	subwf	___awdiv@dividend& (0+255),f,b
   525  007D8C  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
   526  007D8E  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
   527  007D90                     
   528                           ; BSR set to: 0
   529  007D90  816C               	bsf	___awdiv@quotient& (0+255),0,b
   530  007D92                     l827:
   531                           
   532                           ; BSR set to: 0
   533  007D92  90D8               	bcf	status,0,c
   534  007D94  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
   535  007D96  3368               	rrcf	___awdiv@divisor& (0+255),f,b
   536  007D98                     
   537                           ; BSR set to: 0
   538  007D98  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
   539  007D9A  EFB6  F03E         	goto	l819
   540  007D9E                     l831:
   541                           
   542                           ; BSR set to: 0
   543  007D9E  516B               	movf	___awdiv@sign& (0+255),w,b
   544  007DA0  B4D8               	btfsc	status,2,c
   545  007DA2  EFD5  F03E         	goto	u161
   546  007DA6  EFD7  F03E         	goto	u160
   547  007DAA                     u161:
   548  007DAA  EFDB  F03E         	goto	l835
   549  007DAE                     u160:
   550  007DAE                     
   551                           ; BSR set to: 0
   552  007DAE  6D6C               	negf	___awdiv@quotient& (0+255),b
   553  007DB0  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
   554  007DB2  B0D8               	btfsc	status,0,c
   555  007DB4  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
   556  007DB6                     l835:
   557                           
   558                           ; BSR set to: 0
   559  007DB6  C06C  F066         	movff	___awdiv@quotient,?___awdiv
   560  007DBA  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
   561  007DBE                     
   562                           ; BSR set to: 0
   563  007DBE  0012               	return		;funcret
   564  007DC0                     __end_of___awdiv:
   565                           	opt callstack 0
   566  0000                     
   567                           	psect	param0
   568  0000                     tosu	equ	0xFFF
   569                           tosh	equ	0xFFE
   570                           tosl	equ	0xFFD
   571                           stkptr	equ	0xFFC
   572                           pclatu	equ	0xFFB
   573                           pclath	equ	0xFFA
   574                           pcl	equ	0xFF9
   575                           tblptru	equ	0xFF8
   576                           tblptrh	equ	0xFF7
   577                           tblptrl	equ	0xFF6
   578                           tablat	equ	0xFF5
   579                           prodh	equ	0xFF4
   580                           prodl	equ	0xFF3
   581                           indf0	equ	0xFEF
   582                           postinc0	equ	0xFEE
   583                           postdec0	equ	0xFED
   584                           preinc0	equ	0xFEC
   585                           plusw0	equ	0xFEB
   586                           fsr0h	equ	0xFEA
   587                           fsr0l	equ	0xFE9
   588                           wreg	equ	0xFE8
   589                           indf1	equ	0xFE7
   590                           postinc1	equ	0xFE6
   591                           postdec1	equ	0xFE5
   592                           preinc1	equ	0xFE4
   593                           plusw1	equ	0xFE3
   594                           fsr1h	equ	0xFE2
   595                           fsr1l	equ	0xFE1
   596                           bsr	equ	0xFE0
   597                           indf2	equ	0xFDF
   598                           postinc2	equ	0xFDE
   599                           postdec2	equ	0xFDD
   600                           preinc2	equ	0xFDC
   601                           plusw2	equ	0xFDB
   602                           fsr2h	equ	0xFDA
   603                           fsr2l	equ	0xFD9
   604                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      0       0
    BANK0           160     16      16
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           244      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     810
                                             14 BANK0      2     2      0
                            ___awdiv
                             ___wmul
                     _initialisation
 ---------------------------------------------------------------------------------
 (1) _initialisation                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     311
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _initialisation

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     10      10       4       10.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BANK5               F4      0       0      13        0.0%
ABS                  0      0       0      14        0.0%
BITBANK5            F4      0       0      15        0.0%
BIGRAM             5F3      0       0      16        0.0%
DATA                 0      0       0      17        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Apr 15 10:28:32 2020

                     l42 7C3A                       l27 7C8A                       l36 7C5C  
                     l38 7C6A                       l39 7C6C                       u10 7C6A  
                     u11 7C66             ___awdiv@sign 006B      ___wmul@multiplicand 0062  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l273 7DBE                      l801 7D16  
                    l721 7C54                      l811 7D3C                      l803 7D1A  
                    l723 7C5A                      l715 7C3C                      l821 7D72  
                    l813 7D4E                      l805 7D28                      l717 7C3E  
                    l823 7D88                      l815 7D56                      l831 7D9E  
                    l807 7D30                      l719 7C42                      l833 7DAE  
                    l825 7D90                      l817 7D5E                      l809 7D34  
                    l841 7C78                      l835 7DB6                      l827 7D92  
                    l819 7D6C                      l851 7CC0                      l843 7C7C  
                    l829 7D98                      l791 7C32                      l847 7C98  
                    l839 7C6E                      l849 7CB6                      l795 7CFA  
                    l797 7D00                      l789 7C14                      l799 7D0E  
           __CFG_CPB$OFF 000000                      u110 7D0E                      u111 7D0A  
                    u120 7D28                      u121 7D24                      u130 7D4E  
                    u131 7D4A                      u140 7D6C                      u141 7D68  
                    u150 7D88                      u151 7D84                      u160 7DAE  
                    u161 7DAA                      u170 7C8A                      u171 7C86  
                    u180 7C98                      u181 7C94                      u190 7CB6  
                    _PR2 000FCB                      u191 7CB2             __CFG_CPD$OFF 000000  
           __CFG_BORV$18 000000             __CFG_LVP$OFF 000000         ??_initialisation 0060  
                   _main 7C6E                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ?_main 0060          __end_of___awdiv 7DC0  
        ___awdiv@divisor 0068          ___awdiv@counter 006A            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    status 000FD8           __CFG_HFOFST$ON 000000  
         __CFG_PBADEN$ON 000000          __initialization 7C0E             __end_of_main 7CFA  
                 ??_main 006E            __activetblptr 000003                   _CCPR2L 000FBB  
       ___awdiv@dividend 0066                   _ANSELH 000F7F           __CFG_WDTEN$OFF 000000  
         __CFG_XINST$OFF 000000                   ___wmul 7C14                ??___awdiv 006A  
         __CFG_STVREN$ON 000000         ___awdiv@quotient 006C               __accesstop 0060  
__end_of__initialization 7C0E            ___rparam_used 000000                  ?___wmul 0060  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 7CFA  
        __size_of___wmul 0028                  __pcinit 7C0E                  __ramtop 0600  
                __ptext0 7C6E                  __ptext1 7C3C                  __ptext2 7C14  
                __ptext3 7CFA                _T2CONbits 000FCA     end_of_initialization 7C0E  
__size_of_initialisation 0032                _PORTBbits 000F81                _TRISBbits 000F93  
              _TRISCbits 000F94              _CCP2CONbits 000FBA           __end_of___wmul 7C3C  
    start_initialization 7C0E                 ??___wmul 0064         __CFG_LPT1OSC$OFF 000000  
          __pcstackBANK0 0060        __CFG_CCP2MX$PORTC 000000           _initialisation 7C3C  
               ?___awdiv 0066           ___wmul@product 0064   __end_of_initialisation 7C6E  
               _PIR1bits 000F9E         __CFG_WDTPS$32768 000000        ___wmul@multiplier 0060  
               __Hparam0 0000                 __Lparam0 0000          ?_initialisation 0060  
     __CFG_BOREN$SBORDIS 000000         __size_of___awdiv 00C6            __size_of_main 008C  
        main@MLIpourCent 006E        __CFG_FOSC$INTIO67 000000  
